import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime
import numpy as np

# Configure page
st.set_page_config(
    page_title="‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏∏‡∏ô‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó‡∏≠‡∏±‡∏û",
    page_icon="üí∞",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Load data
@st.cache_data
def load_data():
    df = pd.read_csv('startup_funding.csv')
    # Clean amount column - remove commas and convert to numeric
    df['Amount in USD'] = df['Amount in USD'].astype(str).str.replace(',', '')
    df['Amount in USD'] = pd.to_numeric(df['Amount in USD'], errors='coerce')
    # Convert date column
    df['Date dd/mm/yyyy'] = pd.to_datetime(df['Date dd/mm/yyyy'], format='%d/%m/%Y', errors='coerce')
    return df

df = load_data()

# Dashboard Title
st.title("üöÄ ‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏∏‡∏ô‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó‡∏≠‡∏±‡∏û")
st.markdown("---")

# Sidebar filters
st.sidebar.header("üîç ‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á")
industries = st.sidebar.multiselect(
    "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏∏‡∏ï‡∏™‡∏≤‡∏´‡∏Å‡∏£‡∏£‡∏°:",
    options=df['Industry Vertical'].unique(),
    default=["FinTech"] if "FinTech" in df['Industry Vertical'].unique() else [df['Industry Vertical'].unique()[0]]
)

cities = st.sidebar.multiselect(
    "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏∑‡∏≠‡∏á:",
    options=df['City  Location'].unique(),
    default=df['City  Location'].unique()[:10]
)

# Filter data
filtered_df = df[
    (df['Industry Vertical'].isin(industries)) & 
    (df['City  Location'].isin(cities))
]

# Key Metrics
st.header("üìä ‡∏ï‡∏±‡∏ß‡∏ä‡∏µ‡πâ‡∏ß‡∏±‡∏î‡∏´‡∏•‡∏±‡∏Å")
col1, col2, col3, col4 = st.columns(4)

with col1:
    total_funding = filtered_df['Amount in USD'].sum()
    st.metric(
        label="‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏∏‡∏ô‡∏£‡∏ß‡∏°",
        value=f"${total_funding:,.0f}",
        delta=f"{len(filtered_df)} ‡∏î‡∏µ‡∏•"
    )

with col2:
    avg_funding = filtered_df['Amount in USD'].mean()
    st.metric(
        label="‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏∏‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢",
        value=f"${avg_funding:,.0f}",
        delta=f"‡∏ï‡πà‡∏≠‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó‡∏≠‡∏±‡∏û"
    )

with col3:
    total_startups = len(filtered_df['Startup Name'].unique())
    st.metric(
        label="‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó‡∏≠‡∏±‡∏û‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î",
        value=f"{total_startups:,}",
        delta=f"‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡πÄ‡∏â‡∏û‡∏≤‡∏∞"
    )

with col4:
    total_investors = len(filtered_df['Investors Name'].unique())
    st.metric(
        label="‡∏ô‡∏±‡∏Å‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î",
        value=f"{total_investors:,}",
        delta=f"‡∏ô‡∏±‡∏Å‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞"
    )

st.markdown("---")

# Charts Section
st.header("üìà ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏≤‡∏ü")

# Two columns for charts
chart_col1, chart_col2 = st.columns(2)

with chart_col1:
    # Industry-wise funding
    st.subheader("üíº ‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏∏‡∏ô‡∏ï‡∏≤‡∏°‡∏≠‡∏∏‡∏ï‡∏™‡∏≤‡∏´‡∏Å‡∏£‡∏£‡∏°")
    industry_funding = filtered_df.groupby('Industry Vertical')['Amount in USD'].sum().sort_values(ascending=False).head(10)
    
    if not industry_funding.empty:
        fig1 = px.bar(
            x=industry_funding.values,
            y=industry_funding.index,
            orientation='h',
            labels={'x': '‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏∏‡∏ô‡∏£‡∏ß‡∏° (USD)', 'y': '‡∏≠‡∏∏‡∏ï‡∏™‡∏≤‡∏´‡∏Å‡∏£‡∏£‡∏°'},
            title="10 ‡∏≠‡∏∏‡∏ï‡∏™‡∏≤‡∏´‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏∏‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î"
        )
        fig1.update_layout(height=400)
        st.plotly_chart(fig1, use_container_width=True)
    else:
        st.info("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å")

with chart_col2:
    # Investment type distribution
    st.subheader("üéØ ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô")
    investment_types = filtered_df['InvestmentnType'].value_counts().head(8)
    
    if not investment_types.empty:
        fig2 = px.pie(
            values=investment_types.values,
            names=investment_types.index,
            title="‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡∏Ç‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô"
        )
        fig2.update_layout(height=400)
        st.plotly_chart(fig2, use_container_width=True)
    else:
        st.info("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å")

# Full width charts
col_chart1, col_chart2 = st.columns(2)

with col_chart1:
    # City-wise funding
    st.subheader("üèôÔ∏è ‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏∏‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î")
    city_funding = filtered_df.groupby('City  Location')['Amount in USD'].sum().sort_values(ascending=False).head(10)
    
    if not city_funding.empty:
        fig3 = px.bar(
            x=city_funding.index,
            y=city_funding.values,
            labels={'x': '‡πÄ‡∏°‡∏∑‡∏≠‡∏á', 'y': '‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏∏‡∏ô‡∏£‡∏ß‡∏° (USD)'},
            title="10 ‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏∏‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î"
        )
        fig3.update_layout(height=400, xaxis_tickangle=-45)
        st.plotly_chart(fig3, use_container_width=True)
    else:
        st.info("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å")

with col_chart2:
    # Timeline analysis
    st.subheader("üìÖ ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏∏‡∏ô‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤")
    if not filtered_df['Date dd/mm/yyyy'].isna().all() and not filtered_df.empty:
        monthly_funding = filtered_df.groupby(filtered_df['Date dd/mm/yyyy'].dt.to_period('M'))['Amount in USD'].sum()
        
        if not monthly_funding.empty:
            fig4 = px.line(
                x=monthly_funding.index.astype(str),
                y=monthly_funding.values,
                labels={'x': '‡πÄ‡∏î‡∏∑‡∏≠‡∏ô', 'y': '‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏∏‡∏ô‡∏£‡∏ß‡∏° (USD)'},
                title="‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏∏‡∏ô‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"
            )
            fig4.update_layout(height=400, xaxis_tickangle=-45)
            st.plotly_chart(fig4, use_container_width=True)
        else:
            st.info("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÑ‡∏ó‡∏°‡πå‡πÑ‡∏•‡∏ô‡πå")
    else:
        st.info("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÑ‡∏ó‡∏°‡πå‡πÑ‡∏•‡∏ô‡πå")

st.markdown("---")

# Top Startups Table
st.header("üèÜ ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó‡∏≠‡∏±‡∏û‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏∏‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î")

# Create top startups dataframe
top_startups = filtered_df.nlargest(20, 'Amount in USD')[
    ['Startup Name', 'Industry Vertical', 'City  Location', 'Investors Name', 'Amount in USD', 'InvestmentnType']
].copy()

top_startups['Amount in USD'] = top_startups['Amount in USD'].apply(lambda x: f"${x:,.0f}")

st.dataframe(
    top_startups,
    use_container_width=True,
    hide_index=True
)

st.markdown("---")

# Detailed Data Table
st.header("üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡πÇ‡∏î‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î")

# Search functionality
search_term = st.text_input("üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó‡∏≠‡∏±‡∏û ‡∏ô‡∏±‡∏Å‡∏•‡∏á‡∏ó‡∏∏‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏∏‡∏ï‡∏™‡∏≤‡∏´‡∏Å‡∏£‡∏£‡∏°:")

if search_term:
    search_df = filtered_df[
        filtered_df['Startup Name'].str.contains(search_term, case=False, na=False) |
        filtered_df['Investors Name'].str.contains(search_term, case=False, na=False) |
        filtered_df['Industry Vertical'].str.contains(search_term, case=False, na=False)
    ]
else:
    search_df = filtered_df

# Display table with formatting
display_df = search_df[
    ['Date dd/mm/yyyy', 'Startup Name', 'Industry Vertical', 'City  Location', 
     'Investors Name', 'InvestmentnType', 'Amount in USD']
].copy()

display_df['Amount in USD'] = display_df['Amount in USD'].apply(lambda x: f"${x:,.0f}" if pd.notnull(x) else "N/A")

st.dataframe(
    display_df,
    use_container_width=True,
    hide_index=True
)

# Summary statistics
st.markdown("---")
st.header("üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏™‡∏£‡∏∏‡∏õ")

col1, col2 = st.columns(2)

with col1:
    st.subheader("‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏≠‡∏∏‡∏ï‡∏™‡∏≤‡∏´‡∏Å‡∏£‡∏£‡∏°")
    industry_stats = filtered_df.groupby('Industry Vertical').agg({
        'Amount in USD': ['count', 'sum', 'mean'],
        'Startup Name': 'nunique'
    }).round(0)
    
    industry_stats.columns = ['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏î‡∏µ‡∏•', '‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏∏‡∏ô‡∏£‡∏ß‡∏°', '‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏∏‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢', '‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó‡∏≠‡∏±‡∏û‡πÄ‡∏â‡∏û‡∏≤‡∏∞']
    industry_stats = industry_stats.sort_values('‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏∏‡∏ô‡∏£‡∏ß‡∏°', ascending=False).head(10)
    st.dataframe(industry_stats, use_container_width=True)

with col2:
    st.subheader("‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÄ‡∏°‡∏∑‡∏≠‡∏á")
    city_stats = filtered_df.groupby('City  Location').agg({
        'Amount in USD': ['count', 'sum', 'mean'],
        'Startup Name': 'nunique'
    }).round(0)
    
    city_stats.columns = ['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏î‡∏µ‡∏•', '‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏∏‡∏ô‡∏£‡∏ß‡∏°', '‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏∏‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢', '‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó‡∏≠‡∏±‡∏û‡πÄ‡∏â‡∏û‡∏≤‡∏∞']
    city_stats = city_stats.sort_values('‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏∏‡∏ô‡∏£‡∏ß‡∏°', ascending=False).head(10)
    st.dataframe(city_stats, use_container_width=True)

# Footer
st.markdown("---")
st.markdown("**‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏î‡πâ‡∏ß‡∏¢ Streamlit** | ‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: startup_funding.csv")